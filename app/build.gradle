plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'java'
    id 'io.freefair.lombok' version('8.2.2')
    id 'io.qameta.allure' version('2.11.2')
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

def aspectJVersion = "1.9.20.1"

// Define configuration for AspectJ agent
configurations {
    agent {
        canBeResolved = true
        canBeConsumed = true
    }
}

dependencies {
    // Use TestNG framework, also requires calling test.useTestNG() below
    testImplementation 'org.slf4j:slf4j-simple:1.7.32'
    testImplementation 'org.testng:testng:7.5'
    testImplementation 'io.rest-assured:rest-assured:5.4.0'
    testImplementation 'io.qameta.allure:allure-rest-assured:2.27.0'
    implementation 'org.assertj:assertj-core:3.25.3'
    testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.17.1'
    testImplementation 'io.qameta.allure:allure-testng:2.26.0'
    //testImplementation 'io.qameta.allure:allure-assertj:2.27.0'
    implementation 'log4j:log4j:1.2.17'
    agent "org.aspectj:aspectjweaver:$aspectJVersion"
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

test {
    // Use TestNG for unit tests.
    useTestNG() {
        useDefaultListeners = true
        suites 'src/test/testng.xml'
    }
    testLogging {
        events "started", "skipped", "failed", "standard_error", "standard_out"
        exceptionFormat "full"
    }
    jvmArgs = [ "-javaagent:${configurations.agent.singleFile}" ]
}
